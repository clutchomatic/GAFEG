name: App Staging pre-build. 
env:
  ACTIONS_RUNNER_DEBUG: true
  QT_MAC_DIR: ${{ github.workspace }}/qtInstall/Qt/6.4.2/macos 
  QT_IOS_DIR: ${{ github.workspace }}/qtInstall/Qt/6.4.2/ios
  
  KEYCHAIN_PATH: ~/Library/Keychains/build.keychain-db
  KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASSWORD }}
  
  IOS_CERT: ${{ secrets.IOS_CERTIFICATE_STAG_DIST }}
  IOS_CERT_PASS: ""
  IOS_PROF: ${{ secrets.IOS_PROVISIONING_PROFILE_STAG_DIST }}
  
  TESTFLIGHT_API_KEY: ${{ secrets.TESTFLIGHT_API_KEY }}
  TESTFLIGHT_API_KEY_NAME: ${{ secrets.TESTFLIGHT_API_KEY_NAME }}
  TESTFLIGHT_API_ISSUER: ${{ secrets.TESTFLIGHT_API_ISSUER }}
  
  WORKSPACE: ${{ github.workspace }}

  APP_REPO_DIR: ${{ github.workspace }}
  APP_PROJECT_DIR: ${{ github.workspace }}/
  APP_BUILD_DIR: ${{ github.workspace }}/build/
  APP_ARTIFACT_DIR: ${{ github.workspace }}/build/artifacts
  APP_PATH: ${{ github.workspace }}/build/artifacts/Focus.ipa
  
  WEB_REPO_DIR: ${{ github.workspace }}/web_app/
  WEB_PROJECT_DIR: ${{ github.workspace }}/web_app/
  WEB_BUILD_DIR: ${{ github.workspace }}/web_app/build/
  WEB_ARTIFACT_DIR: ${{ github.workspace }}/web_app/build/
  
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: ios Staging Pre-Build
    runs-on: macos-latest
    steps:
      - name: Staging Environment Dump.
        run: |
          brew install tree
          xcodebuild -version
          node --version
          npm --version
          python3 --version

      - name: Clone App GitHub Repo.
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.APP_REPO }}
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: ${{ env.APP_REPO_DIR }}
          ref: AppStore
    
      - name: Clone quick ios GitHub Repo.
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.QUICK_REPO }}
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: ${{ github.workspace }}/Focus/qml/quickios
          ref: qt6_quickios

      - name: Clone quiver GitHub Repo.
        uses: actions/checkout@v3
        with:
          repository: quiverproject/quiver
          path: ${{ github.workspace }}/Focus/Quiver

      - name: Set up Temporary Keychain.
        run: |
          security create-keychain -p $KEYCHAIN_PASS $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASS $KEYCHAIN_PATH

      - name: Install iOS signing certificate.
        run: |
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/InstallCert.sh
          
      - name: Setting up App Config INI.
        run: |
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/ConfigureIni.sh

      - name: Clone Web GitHub Repo.
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.WEB_APP_REPO }}
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: ${{ env.WEB_REPO_DIR }}

      - name: Building Web App.
        run: |
          cd $WEB_PROJECT_DIR
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/BuildWeb.sh

      # - name: Building boost for ios.
      #   run: |
      #     cd ${{ github.workspace }}
      #     curl -L -o boost_1_76_0.tar.bz2 https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.bz2
      #     tar xjf boost_1_76_0.tar.bz2
      #     cp -r boost_1_76_0/ include/

      # - name: Install Qt for mac.
      #   run: |
      #     python3 -m pip install aqtinstall==3.1.*
      #     aqt install-qt mac desktop 6.4.2 clang_64 --outputdir ${{ github.workspace }}/qtInstall/Qt

      # - name: Install Qt for iOS.
      #   uses: jurplel/install-qt-action@v3
      #   with:
      #     aqtversion: '==3.1.*'
      #     py7zrversion: '>=0.20.2'
      #     version: '6.4.2'
      #     host: 'mac'
      #     target: 'ios'
      #     arch: 'ios'
      #     dir: '${{ github.workspace }}/qtInstall/'
      #     modules: 'qtcharts qtconnectivity qthttpserver qtimageformats qtmultimedia qtnetworkauth qtpdf qtpositioning qtremoteobjects qtwebchannel qtwebsockets qtwebview qtquicktimeline qtshadertools'
      #     archives: 'qttranslations qttools qtsvg qtdeclarative qtbase'

      - name: Install qt for ios and mac.
        run: |
          mkdir -p ${{ github.workspace }}/qtInstall/Qt/ && cd ${{ github.workspace }}/qtInstall/Qt/
          curl -L -o qt_6_4_2_ios_macos.tar.gz "https://staging.eye.guide/libs/qt"
          ls -la .
          tar -xjvf qt_6.4.2_ios_macos.tar.gz -C .

      - name: Running Cmake - to generate xcproj.
        run: |
          cd $APP_PROJECT_DIR
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/CmakeCommand.sh

      - name: Running XCode - to generate xcarchive.
        run: |
          cd $APP_BUILD_DIR
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/XcarchiveCommand.sh

      - name: Running XCode - to generate ipa.
        run: |
          cd $APP_BUILD_DIR
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/XcodebuildCommand.sh

#       - name: Uploading archive Dir to GH.
#         uses: actions/upload-artifact@v3
#         with:
#           name: iOS_App_Staging
#           path: ${{ env.APP_ARTIFACT_DIR }}

      - name: Installing TestFlight Private API key P8.
        run: |
          bash ${{ github.workspace }}/WorkflowUtils/AppStag/InstallTestFlightApiKey.sh

      - name: Uploading to TestFlight.
        run: |
          xcrun altool --upload-app --type ios -f $APP_PATH --apiKey $TESTFLIGHT_API_KEY_NAME --apiIssuer $TESTFLIGHT_API_ISSUER